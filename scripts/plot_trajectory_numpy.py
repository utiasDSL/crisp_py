"""Plot trajectory data from numpy array files generated by figure eight experiments."""

import glob
import os

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np

try:
    from rich import print
except ImportError:
    print = print


mpl.rcParams.update(
    {
        "font.family": "serif",
        "font.size": 22,
        "axes.labelsize": 20,
        "legend.fontsize": 12,
        "xtick.labelsize": 18,
        "ytick.labelsize": 18,
        # "font.size": 22,
        # "axes.labelsize": 14,
        # "axes.titlesize": 14,
        # "legend.fontsize": 12,
        # "xtick.labelsize": 12,
        # "ytick.labelsize": 12,
        "text.usetex": True,
    }
)


def list_npz_files(directory: str = "./output") -> list:
    """List all NPZ files in the given directory."""
    npz_files = glob.glob(os.path.join(directory, "*.npz"))
    return [os.path.basename(f) for f in npz_files]


def load_and_validate_npz(filepath: os.PathLike) -> np.ndarray:
    """Load NPZ and validate it has the expected arrays."""
    data = np.load(filepath, allow_pickle=True)

    required_arrays = ["timestamps", "ee_positions", "target_positions"]

    missing_arrays = [arr for arr in required_arrays if arr not in data.files]
    if missing_arrays:
        raise ValueError(f"Missing required arrays: {', '.join(missing_arrays)}")

    return data


def plot_simple_visualization(data: np.ndarray, filename: str):
    """Create simple visualization similar to the figure eight script."""
    timestamps = data["timestamps"]
    ee_positions = data["ee_positions"]
    target_positions = data["target_positions"]

    y_ee = ee_positions[:, 1]
    z_ee = ee_positions[:, 2]
    y_t = target_positions[:, 1]
    z_t = target_positions[:, 2]

    fig, ax = plt.subplots(1, 2, figsize=(10, 5))
    ax[0].plot(y_ee, z_ee, label="current")
    ax[0].plot(y_t, z_t, label="target", linestyle="--")
    ax[0].set_xlabel("$y$")
    ax[0].set_ylabel("$z$")
    ax[0].legend()

    ax[1].plot(timestamps, z_ee, label="current")
    ax[1].plot(timestamps, z_t, label="target", linestyle="--")
    ax[1].set_xlabel("$t$")
    ax[1].set_ylabel("$z$")
    ax[1].legend()

    for a in ax:
        a.grid()

    fig.tight_layout()

    # Save as PDF
    pdf_filename = f"simple_trajectory_{filename.replace('.npz', '')}.pdf"
    plt.savefig(pdf_filename, bbox_inches="tight", dpi=300)
    print(f"Figure saved as: {pdf_filename}")

    plt.show()


def plot_multiple_simple_visualization(datasets: list):
    """Create simple visualization comparing multiple runs."""
    fig, ax = plt.subplots(1, 2, figsize=(12, 5))

    # Plot target only once (from first dataset)
    first_data = datasets[0]["data"]
    target_positions = first_data["target_positions"]
    y_t = target_positions[:, 1]
    z_t = target_positions[:, 2]

    ax[0].plot(y_t, z_t, label="target", linestyle="--", color="black", linewidth=2)

    for i, dataset in enumerate(datasets):
        data = dataset["data"]
        filename = dataset["filename"]

        timestamps = data["timestamps"]
        ee_positions = data["ee_positions"]

        y_ee = ee_positions[:, 1]
        z_ee = ee_positions[:, 2]

        short_name = filename.split(".")[0]  # Extract a short identifier from filename

        # Extract a short identifier from filename
        ax[0].plot(y_ee, z_ee, label=f"{short_name}")
        ax[1].plot(timestamps, z_ee, label=f"{short_name}")

    # Plot target for Z vs time (only once)
    first_timestamps = datasets[0]["data"]["timestamps"]
    ax[1].plot(first_timestamps, z_t, label="target", linestyle="--", color="black", linewidth=2)

    ax[0].set_xlabel("Position $y$ [m]")
    ax[0].set_ylabel("Position $z$ [m]")
    ax[0].legend()
    ax[0].grid()

    ax[1].set_xlabel("Time [s]")
    ax[1].set_ylabel("Position $z$ [m]")
    ax[1].legend()
    ax[1].grid()

    fig.tight_layout()

    # Save as PDF
    filenames_str = "_vs_".join([d["filename"].replace(".npz", "") for d in datasets])
    pdf_filename = f"comparison_{filenames_str}.pdf"
    if len(pdf_filename) > 200:  # Avoid very long filenames
        pdf_filename = f"comparison_{len(datasets)}_runs.pdf"

    plt.savefig("output/" + pdf_filename, bbox_inches="tight", dpi=300)
    print(f"Comparison figure saved as: {pdf_filename}")

    plt.show()


def plot_trajectory_data(data: np.ndarray, filename: str):
    """Create comprehensive plots of the trajectory data."""
    timestamps = data["timestamps"]

    ee_positions = data["ee_positions"]
    ee_x = ee_positions[:, 0]
    ee_y = ee_positions[:, 1]
    ee_z = ee_positions[:, 2]

    target_positions = data["target_positions"]
    target_x = target_positions[:, 0]
    target_y = target_positions[:, 1]
    target_z = target_positions[:, 2]

    error_x = ee_x - target_x
    error_y = ee_y - target_y
    error_z = ee_z - target_z
    error_magnitude = np.sqrt(error_x**2 + error_y**2 + error_z**2)

    fig = plt.figure(figsize=(15, 12))

    ax1 = fig.add_subplot(2, 3, 1, projection="3d")
    ax1.plot(ee_x, ee_y, ee_z, label="End Effector", alpha=0.8)
    ax1.plot(target_x, target_y, target_z, label="Target", linestyle="--", alpha=0.8)
    ax1.set_xlabel("X [m]")
    ax1.set_ylabel("Y [m]")
    ax1.set_zlabel("Z [m]")
    ax1.legend()
    ax1.set_title("3D Trajectory")
    ax1.grid(True)

    # YZ plane (figure eight view)
    ax2 = fig.add_subplot(2, 3, 2)
    ax2.plot(ee_y, ee_z, label="End Effector")
    ax2.plot(target_y, target_z, label="Target", linestyle="--")
    ax2.set_xlabel("Y [m]")
    ax2.set_ylabel("Z [m]")
    ax2.legend()
    ax2.set_title("YZ Plane (Figure Eight)")
    ax2.grid(True)
    ax2.set_aspect("equal")

    # Position vs time
    ax3 = fig.add_subplot(2, 3, 3)
    ax3.plot(timestamps, ee_x, label="EE X")
    ax3.plot(timestamps, ee_y, label="EE Y")
    ax3.plot(timestamps, ee_z, label="EE Z")
    ax3.plot(timestamps, target_x, "--", alpha=0.7, label="Target X")
    ax3.plot(timestamps, target_y, "--", alpha=0.7, label="Target Y")
    ax3.plot(timestamps, target_z, "--", alpha=0.7, label="Target Z")
    ax3.set_xlabel("Time [s]")
    ax3.set_ylabel("Position [m]")
    ax3.legend()
    ax3.set_title("Position vs Time")
    ax3.grid(True)

    # Tracking errors
    ax4 = fig.add_subplot(2, 3, 4)
    ax4.plot(timestamps, error_x, label="Error X")
    ax4.plot(timestamps, error_y, label="Error Y")
    ax4.plot(timestamps, error_z, label="Error Z")
    ax4.plot(timestamps, error_magnitude, "k-", linewidth=2, label="Error Magnitude")
    ax4.set_xlabel("Time [s]")
    ax4.set_ylabel("Tracking Error [m]")
    ax4.legend()
    ax4.set_title("Tracking Errors")
    ax4.grid(True)

    # Error statistics
    ax5 = fig.add_subplot(2, 3, 5)
    error_stats = {
        "Mean Error": [
            np.mean(np.abs(error_x)),
            np.mean(np.abs(error_y)),
            np.mean(np.abs(error_z)),
        ],
        "Max Error": [np.max(np.abs(error_x)), np.max(np.abs(error_y)), np.max(np.abs(error_z))],
        "RMS Error": [
            np.sqrt(np.mean(error_x**2)),
            np.sqrt(np.mean(error_y**2)),
            np.sqrt(np.mean(error_z**2)),
        ],
    }

    x_pos = np.arange(3)
    width = 0.25

    ax5.bar(x_pos - width, error_stats["Mean Error"], width, label="Mean", alpha=0.8)
    ax5.bar(x_pos, error_stats["Max Error"], width, label="Max", alpha=0.8)
    ax5.bar(x_pos + width, error_stats["RMS Error"], width, label="RMS", alpha=0.8)

    ax5.set_xlabel("Axis")
    ax5.set_ylabel("Error [m]")
    ax5.set_title("Error Statistics")
    ax5.set_xticks(x_pos)
    ax5.set_xticklabels(["X", "Y", "Z"])
    ax5.legend()
    ax5.grid(True, alpha=0.3)

    # Velocity analysis (if we have enough data points)
    if len(timestamps) > 1:
        ax6 = fig.add_subplot(2, 3, 6)
        dt = np.diff(timestamps)

        # Calculate velocities
        vel_x = np.diff(ee_x) / dt
        vel_y = np.diff(ee_y) / dt
        vel_z = np.diff(ee_z) / dt
        vel_magnitude = np.sqrt(vel_x**2 + vel_y**2 + vel_z**2)

        ax6.plot(timestamps[1:], vel_magnitude, "b-", alpha=0.7)
        ax6.set_xlabel("Time [s]")
        ax6.set_ylabel("Velocity Magnitude [m/s]")
        ax6.set_title("End Effector Velocity")
        ax6.grid(True)

    plt.suptitle(f"Trajectory Analysis: {filename}", fontsize=16)
    plt.tight_layout()

    # Print summary statistics
    print("\n=== Trajectory Analysis Summary ===")
    print(f"File: {filename}")
    print(f"Duration: {timestamps[-1] - timestamps[0]:.2f} seconds")
    print(f"Data points: {len(timestamps)}")
    print(f"Sampling rate: {len(timestamps) / (timestamps[-1] - timestamps[0]):.1f} Hz")

    # Print controller info if available
    if "controller_path" in data.files:
        controller_path = str(data["controller_path"])
        print(f"Controller used: {controller_path}")

    # Print experiment parameters if available
    if "experiment_params" in data.files:
        params = data["experiment_params"].item()
        print("Experiment parameters:")
        for key, value in params.items():
            if isinstance(value, np.ndarray):
                print(f"  {key}: {value}")
            else:
                print(f"  {key}: {value}")

    print("\nTracking Error Statistics:")
    print(
        f"  Mean absolute error: X={np.mean(np.abs(error_x)) * 1000:.2f}mm, Y={np.mean(np.abs(error_y)) * 1000:.2f}mm, Z={np.mean(np.abs(error_z)) * 1000:.2f}mm"
    )
    print(
        f"  Max absolute error: X={np.max(np.abs(error_x)) * 1000:.2f}mm, Y={np.max(np.abs(error_y)) * 1000:.2f}mm, Z={np.max(np.abs(error_z)) * 1000:.2f}mm"
    )
    print(
        f"  RMS error: X={np.sqrt(np.mean(error_x**2)) * 1000:.2f}mm, Y={np.sqrt(np.mean(error_y**2)) * 1000:.2f}mm, Z={np.sqrt(np.mean(error_z**2)) * 1000:.2f}mm"
    )
    print(f"  Mean magnitude error: {np.mean(error_magnitude) * 1000:.2f}mm")

    # Save as PDF
    pdf_filename = f"comprehensive_analysis_{filename.replace('.npz', '')}.pdf"
    plt.savefig(pdf_filename, bbox_inches="tight", dpi=300)
    print(f"Comprehensive analysis figure saved as: {pdf_filename}")

    plt.show()


def main():
    """Main function to select and plot NPZ files."""
    print("=== Trajectory NPZ Plotter ===")

    # Get current directory NPZ files
    output_dir = os.getcwd() + "/output"
    if not os.path.exists(output_dir):
        raise FileNotFoundError(
            f"Output directory does not exist: {output_dir}, make sure to run the figure eight script first."
        )

    npz_files = list_npz_files(output_dir)

    if not npz_files:
        print("No NPZ files found in output directory.")

        # Ask user for custom path
        custom_path = input("Enter path to NPZ file or directory: ").strip()
        if os.path.isfile(custom_path) and custom_path.endswith(".npz"):
            npz_files = [os.path.basename(custom_path)]
            output_dir = os.path.dirname(custom_path)
        elif os.path.isdir(custom_path):
            output_dir = custom_path
            npz_files = list_npz_files(output_dir)

        if not npz_files:
            print("No NPZ files found. Exiting.")
            return

    print(f"\nFound {len(npz_files)} NPZ file(s) in {output_dir}:")

    # List available files
    for i, filename in enumerate(npz_files, 1):
        filepath = os.path.join(output_dir, filename)
        file_size = os.path.getsize(filepath)
        mod_time = os.path.getmtime(filepath)
        from datetime import datetime

        mod_time_str = datetime.fromtimestamp(mod_time).strftime("%Y-%m-%d %H:%M:%S")
        print(f"  {i}. {filename} ({file_size / 1024:.1f} KB, modified: {mod_time_str})")

    # Ask for single or multiple file selection
    print("\nSelection options:")
    print("1. Plot single file")
    print("2. Plot multiple files (comparison)")

    selection_choice = input("Select option (1-2, default: 1): ").strip()

    if selection_choice == "2":
        # Multiple file selection
        print(
            "\nSelect multiple files to compare (enter numbers separated by commas, e.g., '1,2,3'):"
        )
        while True:
            try:
                choices = input(
                    f"Enter file numbers (1-{len(npz_files)}, or 'q' to quit): "
                ).strip()

                if choices.lower() == "q":
                    print("Exiting.")
                    return

                # Parse comma-separated indices
                file_indices = [int(x.strip()) - 1 for x in choices.split(",")]

                # Validate all indices
                if all(0 <= idx < len(npz_files) for idx in file_indices):
                    if len(file_indices) < 2:
                        print("Please select at least 2 files for comparison.")
                        continue
                    if len(file_indices) > 10:
                        print("Maximum 10 files allowed for comparison.")
                        continue
                    selected_files = [npz_files[idx] for idx in file_indices]
                    break
                else:
                    print(f"Please enter valid numbers between 1 and {len(npz_files)}")

            except ValueError:
                print("Please enter valid numbers separated by commas or 'q' to quit")

        # Load all selected files
        datasets = []
        for filename in selected_files:
            filepath = os.path.join(output_dir, filename)
            print(f"Loading: {filename}")

            data = load_and_validate_npz(filepath)
            if data is not None:
                datasets.append({"data": data, "filename": filename})
                print(f"  Successfully loaded {len(data['timestamps'])} data points")
            else:
                print(f"  Failed to load {filename}")

        if datasets:
            print(f"\nLoaded {len(datasets)} files for comparison")

            # Only simple visualization supported for multiple files
            print("Creating comparison plot...")
            plot_multiple_simple_visualization(datasets)
        else:
            print("No valid files loaded for comparison")

    else:
        # Single file selection
        while True:
            try:
                choice = input(
                    f"\nSelect file to plot (1-{len(npz_files)}, or 'q' to quit): "
                ).strip()

                if choice.lower() == "q":
                    print("Exiting.")
                    return

                file_index = int(choice) - 1
                if 0 <= file_index < len(npz_files):
                    selected_file = npz_files[file_index]
                    break
                else:
                    print(f"Please enter a number between 1 and {len(npz_files)}")

            except ValueError:
                print("Please enter a valid number or 'q' to quit")

        # Load and plot the selected file
        filepath = os.path.join(output_dir, selected_file)
        print(f"\nLoading: {filepath}")

        data = load_and_validate_npz(filepath)
        if data is not None:
            print(f"Successfully loaded {len(data['timestamps'])} data points")

            # Ask user for plot type
            print("\nPlot options:")
            print("1. Simple visualization (2 plots)")
            print("2. Comprehensive analysis (6 plots + statistics)")

            plot_choice = input("Select plot type (1-2, default: 2): ").strip()

            if plot_choice == "1":
                plot_simple_visualization(data, selected_file)
            else:
                plot_trajectory_data(data, selected_file)
        else:
            print("Failed to load or validate NPZ file")


if __name__ == "__main__":
    main()
